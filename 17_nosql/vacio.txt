CALENTAMIENTO
-------------

1. ¿Cuántas colecciones tiene la base de datos?

La bd tiene 2 colecciones: restaurants & neighbourhoods


2. ¿Cuántos documentos en cada colección? ¿Cuánto pesa cada colección?

restaurants: documents: 25359, total size: 10.1MB

neighbourhoods: documents: 195, total size: 3.2MB


3. ¿Cuántos índices en cada colección? ¿Cuánto espacio ocupan los índices de cada
colección?

restaurants: 1 index, total size: 248.0KB
neighbourhoods: 1 index, total size: 20.0KB

-- QUERY: db.restaurants.totalIndexSize()


4. Traer un documento de ejemplo de cada colección. db.collection.find(...).pretty() nos da
un formato más legible.

QUERY restaurants:
db.restaurants.find({name:"The Movable Feast"}).pretty()

RESULT:
{ _id: ObjectId("5eb3d668b31de5d588f4293c"),
  address: 
   { building: '284',
     coord: [ -73.9829239, 40.6580753 ],
     street: 'Prospect Park West',
     zipcode: '11215' },
  borough: 'Brooklyn',
  cuisine: 'American',
  grades: 
   [ { date: 2014-11-19T00:00:00.000Z, grade: 'A', score: 11 },
     { date: 2013-11-14T00:00:00.000Z, grade: 'A', score: 2 },
     { date: 2012-12-05T00:00:00.000Z, grade: 'A', score: 13 },
     { date: 2012-05-17T00:00:00.000Z, grade: 'A', score: 11 } ],
  name: 'The Movable Feast',
  restaurant_id: '40361606' }

QUERY neighbourhood:
db.neighborhoods.aggregate([{$match: {
  name:"Williamsbridge-Olinville"
}}, {$project: {
  name:1
}}]).pretty()


RESULT:
{ _id: ObjectId("55cb9c666c522cafdb053a23"),
  name: 'Williamsbridge-Olinville' }


5. Para cada colección, listar los campos a nivel raíz (ignorar campos dentro de
documentos anidados) y sus tipos de datos.


restaurants:
_id
address
borough
cuisine
grades
name
restaurant_id

neighbourhoods:
_id
geometry
name

------------------------------------------------------------------------
------------------------------------------------------------------------

SQL
----


1.

QUERY:
db.restaurants.aggregate([{
    $limit: 1
}, {
    $project: {
        restaurant_id: 1,
        name: 1,
        borough: 1,
        _id: 0
    }
}]).pretty()


RESULT:
{ borough: 'Brooklyn',
  name: 'Riviera Caterer',
  restaurant_id: '40356018' }

2. 

QUERY: 
db.restaurants.find({name:/Bake/},{_id:0,restaurant_id:1,borough:1,cuisine:1}).limit(3).pretty()


RESULT:
{ borough: 'Bronx',
  cuisine: 'Bakery',
  restaurant_id: '30075445' }
{ borough: 'Staten Island',
  cuisine: 'American',
  restaurant_id: '40370910' }
{ borough: 'Queens',
  cuisine: 'Caribbean',
  restaurant_id: '40377560' }

3.

QUERY: db.restaurants.find({cuisine:{$in:["Chinese","Thai"]},borough:"Bronx"}).count()
RESULT: 325


------------------------------------------------------------------------
------------------------------------------------------------------------

NO SQL
----

1. 

QUERY: 
db.restaurants.find(
 { grades: { $elemMatch: { grade: "A", score: { $gt: 5}}}}).limit(3)


RESULT:
{ _id: ObjectId("5eb3d668b31de5d588f4292a"),
  address: 
   { building: '2780',
     coord: [ -73.98241999999999, 40.579505 ],
     street: 'Stillwell Avenue',
     zipcode: '11224' },
  borough: 'Brooklyn',
  cuisine: 'American',
  grades: 
   [ { date: 2014-06-10T00:00:00.000Z, grade: 'A', score: 5 },
     { date: 2013-06-05T00:00:00.000Z, grade: 'A', score: 7 },
     { date: 2012-04-13T00:00:00.000Z, grade: 'A', score: 12 },
     { date: 2011-10-12T00:00:00.000Z, grade: 'A', score: 12 } ],
  name: 'Riviera Caterer',
  restaurant_id: '40356018' }
{ _id: ObjectId("5eb3d668b31de5d588f4292b"),
  address: 
   { building: '7114',
     coord: [ -73.9068506, 40.6199034 ],
     street: 'Avenue U',
     zipcode: '11234' },
  borough: 'Brooklyn',
  cuisine: 'Delicatessen',
  grades: 
   [ { date: 2014-05-29T00:00:00.000Z, grade: 'A', score: 10 },
     { date: 2014-01-14T00:00:00.000Z, grade: 'A', score: 10 },
     { date: 2013-08-03T00:00:00.000Z, grade: 'A', score: 8 },
     { date: 2012-07-18T00:00:00.000Z, grade: 'A', score: 10 },
     { date: 2012-03-09T00:00:00.000Z, grade: 'A', score: 13 },
     { date: 2011-10-14T00:00:00.000Z, grade: 'A', score: 9 } ],
  name: 'Wilken\'S Fine Food',
  restaurant_id: '40356483' }
{ ... }


2.

QUERY:
db.restaurants.count(
 { "address.coord": { $size: 0 } }
)


RESULT: 2


3. 

QUERY:
db.restaurants.find(
 { },
 { name: 1, borough: 1, cuisine: 1, grades: { $slice: -1 } }
).limit(3)

RESULT:
{ _id: ObjectId("5eb3d668b31de5d588f4292a"),
  borough: 'Brooklyn',
  cuisine: 'American',
  grades: [ { date: 2011-10-12T00:00:00.000Z, grade: 'A', score: 12 } ],
  name: 'Riviera Caterer' }
{ _id: ObjectId("5eb3d668b31de5d588f4292b"),
  borough: 'Brooklyn',
  cuisine: 'Delicatessen',
  grades: [ { date: 2011-10-14T00:00:00.000Z, grade: 'A', score: 9 } ],
  name: 'Wilken\'S Fine Food' }
{ _id: ObjectId("5eb3d668b31de5d588f4292c"),
  borough: 'Staten Island',
  cuisine: 'Jewish/Kosher',
  grades: [ { date: 2012-01-24T00:00:00.000Z, grade: 'A', score: 9 } ],
  name: 'Kosher Island' }

------------------------------------------------------------------------
------------------------------------------------------------------------

DESAFIANTES
-----------

1.

QUERY:
 db.restaurants.aggregate([
    {"$group" : {_id:"$cuisine", count:{$sum:1}}}, { $sort:{'count':-1}},{$limit:3}
]); 

RESULT:
{ _id: 'American', count: 6183 }
{ _id: 'Chinese', count: 2418 }
{ _id: 'Café/Coffee/Tea', count: 1214 }

2.

QUERY:
db.restaurants.aggregate([{$match: {$expr:{$gt:[{$size:"$grades"}, 3]}}}, {$unwind: {path: "$grades"}}, {$group: {_id:"$borough", avg: {$avg: "$grades.score"}}}, { $sort:{'avg':-1}}])

RESULTS:
{ _id: 'Queens', avg: 11.885062265387594 }
{ _id: 'Brooklyn', avg: 11.734872657655044 }
{ _id: 'Manhattan', avg: 11.705527127101675 }
{ _id: 'Staten Island', avg: 11.67306052855925 }
{ _id: 'Bronx', avg: 11.134045243782493 }
{ _id: 'Missing', avg: 7.5 }



3. 

QUERY:
db.restaurants.find({ "address.coord":{ $geoWithin:{ $centerSphere: [ [ -73.93414657, 40.82302903 ], 500 ] } } }, {_id:0,name:1, cuisine:1, borough:1})

RESULT:
{ borough: 'Brooklyn',
  cuisine: 'American',
  name: 'Riviera Caterer' }
{ borough: 'Brooklyn',
  cuisine: 'Delicatessen',
  name: 'Wilken\'S Fine Food' }
{ borough: 'Staten Island',
  cuisine: 'Jewish/Kosher',
  name: 'Kosher Island' }
{ borough: 'Brooklyn', cuisine: 'Hamburgers', name: 'Wendy\'S' }
{ borough: 'Bronx',
  cuisine: 'Bakery',
  name: 'Morris Park Bake Shop' }
{ borough: 'Queens',
  cuisine: 'Jewish/Kosher',
  name: 'Tov Kosher Kitchen' }
{ borough: 'Queens',
  cuisine: 'American',
  name: 'Brunos On The Boulevard' }
{...}