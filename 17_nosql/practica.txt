1. ¿Cuántas colecciones tiene la base de datos?
Tiene dos, Restaurants y Neighborhoods

2. ¿Cuántos documentos en cada colección? ¿Cuánto pesa cada colección?
Neighborhoods tiene 195 documentos y pesa 3.2 MB
Restaurants tiene 25359 documentos y pesa 10.1 MB

3. ¿Cuántos índices en cada colección? ¿Cuánto espacio ocupan los índices de cada colección?
Neighborhoods tiene 1 indice y pesa 20 KB
Restaurants tiene un indice y pesa 236 KB

4. Traer un documento de ejemplo de cada colección. db.collection.find(...).pretty() nos da un formato más legible.

=======================================================================================================================================

SQL 

1. Devolver restaurant_id, name, borough y cuisine pero excluyendo _id para un documento (el primero).
- db.restaurants.find({}, {restaurant_id : 1, name : 1, borough: 1, cuisine: 1, _id: 0})

2. Devolver restaurant_id, name, borough y cuisine para los primeros 3 restaurantes que contengan 'Bake' en alguna parte de su nombre.
-  db.restaurants.find({name : /Bake/}, {restaurant_id : 1, name : 1, borough: 1, cuisine: 1, _id: 0}).limit(3)

3. Contar los restaurantes de comida (cuisine) china (Chinese) o tailandesa (Thai) del barrio (borough) Bronx. Consultar or versus in.
- db.restaurants.find( { cuisine: { $in: ["Chinese", "Thai"] } } ,{borough: "Bronx"}).count()
2703

=======================================================================================================================================

NOSQL

1. Traer 3 restaurantes que hayan recibido al menos una calificación de grade 'A' con score mayor a 50. Una misma calificación debe cumplir con ambas condiciones simultáneamente; investigar el operador elemMatch.
- db.restaurants.find( { grades: { $elemMatch: { grade: "A", score: { $gt: 5 } } } }).limit(3)

2. ¿A cuántos documentos les faltan las coordenadas geográficas? En otras palabras, revisar si el tamaño de address.coord es 0 y contar.
- db.restaurants.find( { "address.coord":{ $size:0 } } ).count()

3. Devolver name, borough, cuisine y grades para los primeros 3 restaurantes; de cada documento solo la última calificación. Ver el operador slice.
- db.restaurants.find({},{name: 1, borough: 1, cuisine: 1, grades: {$slice: -1 }}).limit(3)

=======================================================================================================================================
