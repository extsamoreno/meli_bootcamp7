1¿Cuántas colecciones tiene la base de datos?
    -> 2
2. ¿Cuántos documentos en cada colección? ¿Cuánto pesa cada colección?
        use EjercicioMañana
        'switched to db EjercicioMañana'
    ->    db.restaurants.find().count()
        25359
    -> db.neighborhoods.find().count()
       195
3. ¿Cuántos índices en cada colección? ¿Cuánto espacio ocupan los índices de cada
colección?
    -> neighborhoods 3.2 MB
    -> restaurants :10.1MB
4. Traer un documento de ejemplo de cada colección. db.collection.find(...).pretty() nos da
un formato más legible.
    ->db.neighborhoods.find({},{name:1, _id:0}).pretty()
      { name: 'Bedford' }
      { name: 'Midwood' }
      { name: 'Fordham South' }
      { name: 'Borough Park' }
      { name: 'East Flushing' }
      { name: 'Rugby-Remsen Village' }
      { name: 'Woodhaven' }
      { name: 'Madison' }
      { name: 'Auburndale' }
      { name: 'Williamsbridge-Olinville' }
      { name: 'East New York (Pennsylvania Ave)' }
      { name: 'Murray Hill' }
      { name: 'Kensington-Ocean Parkway' }
      { name: 'Parkchester' }
      { name: 'Brownsville' }
      { name: 'Erasmus' }
      { name: 'East Elmhurst' }
      { name: 'Cambria Heights' }
      { name: 'East Flatbush-Farragut' }
      { name: 'Ocean Parkway South' }
      Type "it" for more

    ->db.restaurants.find({},{name:1, cuisine:1,  _id:0}).pretty()
      { cuisine: 'American', name: 'Riviera Caterer' }
      { cuisine: 'Delicatessen', name: 'Wilken\'S Fine Food' }
      { cuisine: 'Jewish/Kosher', name: 'Kosher Island' }
      { cuisine: 'Hamburgers', name: 'Wendy\'S' }
      { cuisine: 'Bakery', name: 'Morris Park Bake Shop' }
      { cuisine: 'Jewish/Kosher', name: 'Tov Kosher Kitchen' }
      { cuisine: 'American', name: 'Brunos On The Boulevard' }
      { cuisine: 'American', name: 'Regina Caterers' }
      { cuisine: 'Ice Cream, Gelato, Yogurt, Ices',
        name: 'Taste The Tropics Ice Cream' }
      { cuisine: 'American', name: 'Wild Asia' }
      { cuisine: 'American', name: 'C & C Catering Service' }
      { cuisine: 'Jewish/Kosher', name: 'Seuda Foods' }
      { cuisine: 'Chinese', name: 'May May Kitchen' }
      { cuisine: 'American', name: '1 East 66Th Street Kitchen' }
      { cuisine: 'Ice Cream, Gelato, Yogurt, Ices',
        name: 'Carvel Ice Cream' }
      { cuisine: 'Irish', name: 'Dj Reynolds Pub And Restaurant' }
      { cuisine: 'Ice Cream, Gelato, Yogurt, Ices',
        name: 'Carvel Ice Cream' }
      { cuisine: 'Delicatessen', name: 'Nordic Delicacies' }
      { cuisine: 'American', name: 'The Movable Feast' }
      { cuisine: 'Delicatessen', name: 'Bully\'S Deli' }
      Type "it" for more
5. Para cada colección, listar los campos a nivel raíz (ignorar campos dentro de
documentos anidados) y sus tipos de datos.

    ->Realizada en la 4



  -------------------------------------

Usando Mongo Shell. Colección restaurants:
1. Devolver restaurant_id, name, borough y cuisine pero excluyendo _id para un documento (el primero).
2. Devolver restaurant_id, name, borough y cuisine para los primeros 3 restaurantes que contengan 'Bake'
en alguna parte de su nombre.
3. Contar los restaurantes de comida (cuisine) china (Chinese) o tailandesa (Thai) del barrio (borough)
Bronx. Consultar or versus in.

1.
db.restaurants.findOne(
 { },
 { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 }
)
2.
db.restaurants.find(
 { name: /Bake/ },
 { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }
).limit(3)
3.
db.restaurants.count(
 { cuisine: { $in: [ "Chinese", "Thai" ] }, borough: "Bronx" }
)

NoSQL
1. Traer 3 restaurantes que hayan recibido al menos una calificación de grade 'A' con score mayor a 50. Una
misma calificación debe cumplir con ambas condiciones simultáneamente; investigar el operador
elemMatch.
2. ¿A cuántos documentos les faltan las coordenadas geográficas? En otras palabras, revisar si el tamaño de
address.coord es 0 y contar.
3. Devolver name, borough, cuisine y grades para los primeros 3 restaurantes; de cada documento solo la
última calificación. Ver el operador slice.

NoSQL
1.
db.restaurants.find(
 { grades: { $elemMatch: { grade: "A", score: { $gt: 50 } } }
).limit(3)
2.
db.restaurants.count(
 { "address.coord": { $size: 0 } }
)
3.
db.restaurants.find(
 { },
 { name: 1, borough: 1, cuisine: 1, grades: { $slice: -1 } }
).limit(3)

    ----------------------------------------------------------
Desafiantes
1. ¿Cuál es top 3 de tipos de cocina (cuisine) que podemos encontrar entre los datos? Googlear "mongodb group by
field, count it and sort it". Ver etapa limit del pipeline de agregación.

    ->db.restaurants.aggregate([
          {"$group" : {_id:"$cuisine", count:{$sum:1}}}, { $sort:{'count':-1}},{$limit:3}
      ]);

2. ¿Cuáles son los barrios más desarrollados gastronómicamente? Calcular el promedio ($avg) de puntaje
(grades.score) por barrio; considerando restaurantes que tengan más de tres reseñas; ordenar barrios con mejor
puntaje arriba. Ayuda:
a. match es una etapa que filtra documentos según una condición, similar a db.orders.find(<condición>).
b. Parece necesario deconstruir las listas grades para producir un documento por cada puntaje utilizando la
etapa unwind.

    ->
            db.restaurants.aggregate([
              {$match: {$expr:{$gt:[{$size:"$grades"}, 3]}}},
              {$unwind: {path: "$grades"}},
              {$group: {_id:"$cuisine", avg: {$avg: "$grades.score"}}},
              {$sort:{'avg':-1}}
              ]);


3. Una persona con ganas de comer está en longitud -73.93414657 y latitud 40.82302903, ¿qué opciones tiene en
500 metros a la redonda? Consultar geospatial tutorial.

    ->??????? ver!!!!!!!
    db.simple_restaurants.find({
      location: { $nearSphere: { $geometry: { type: "Point", coordinates: [ -73.93414657, 40.82302903 ] },
      $maxDistance: 500 } } })
