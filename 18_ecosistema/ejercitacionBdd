------------------------------------------------------------ EJERCITACION ECOSISTEMA DE STORAGE Y FURY ------------------------------------------------------------

1. Tengo que  crear una aplicación que se encarga de manejar la gestión de dinero en cuenta de los usuarios de Mercado Pago. Cuando un usuario paga, luego de validar que tiene saldo, tengo que registrar el pago y decrementar su saldo. Cuando un usuario deposita dinero, tengo que incrementar su saldo. Asimismo, con cada pago aprobado, y usando los valores del pago y el usuario varias aplicaciones de Fraude calculan modelos de riesgo de los usuarios. Desde una perspectiva de base de datos, ¿que utilizarías? ¿Porque? ¿Se te ocurre más de una forma de hacerlo?

Dado que en este caso estarìamos manejando transacciones de dinero, con muchas acciones a realizar en simulatáneo, resultaría muy beneficioso el uso de una base de datos del tipo KVS ya que podremos acceder a ellas mediante su ID/Key manteniendo la consistencia de la BDD. Así se maneja que los datos puedan ser accedidios frecuentemente sin problema alguno.
Otra solución podría ser la implementación de una base de datos del tipo relacional, debido a que estamos hablando de transacciones de dinero, y necesitamos una buena consistencia de los datos, como mencionamos anteriormente.

2. Tengo que crear una aplicación que guarda datos de envíos. Para cada envío tengo que guardar algunos datos clave como shippingId, comprador, vendedor, producto, costo total, transportista y ruta. Asimismo, asociado con eso, se debe guardar una foto de la orden de envío.  Usualmente el equipo accede a esta data por el shippingId. Además de esto, necesitan obtener en ocasiones, informaciones sobre los envíos para un comprador o vendedor en particular y agrupar por ellos el costo total generado. Finalmente, por cuestiones regulatorias, deben saber hasta por 10 años por que ruta se envió un producto. Desde una perspectiva de base de datos, ¿que utilizarías? ¿Por que? ¿Se te ocurre más de una forma de hacerlo?

En este caso, resultaría útil la implementación de un Object Storage ya que debemos almacenar imágenes, las cuales se comportan como archivos binarios; y un KVS para almacenar el resto de los datos de los envíos, siendo la razón principal de esta decisión el hecho de que acceden a estos datos por medio del shippingId. Para la solución al tema de la cuestión regulatoria, se puede considerar un Audit, ya que esos datos no serán accedidos de manera frecuente, sino que solo necesitamos que estén allí hasta por 10 años.