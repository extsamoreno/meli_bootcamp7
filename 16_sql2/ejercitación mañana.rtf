{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier-Bold;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14600\viewh17600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. Un join es una combinaci\'f3n entre los campos de una tabla con los campos de otra.\
2. Inner join devuelve una tabla con los campos de la tabla A que tengan correlativos en la tabla B, es decir la intersecci\'f3n entre los dos conjuntos\
Left Join devuelve una tabla con todos los campos de la tabla A m\'e1s los campos de la tabla B que tengan correlativos con la tabla A, es decir, el conjunto A y la intersecci\'f3n con el conjunto B\
\
3. GROUP BY agrupa las los resultados seg\'fan el criterio que se especifique, usualmente usado con las funciones de agregaci\'f3n.\
4.HAVING se utiliza como filtro en lugar de la cl\'e1usula WHERE para filtrar por el resultado de una funci\'f3n de agregaci\'f3n.\
5. El primero corresponde a un INNER JOIN y el segundo a un LEFT JOIN\
6. Select * from tablaA right join tablaB\
    Select * from tablaA, tablaB\
\cf2 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b\fs26 \cf2 select 
\f2\b0 \cf2 title, 
\f1\b \cf2 name from 
\f2\b0 \cf2 movies 
\f1\b \cf2 as 
\f2\b0 \cf2 m 
\f1\b \cf2 inner join 
\f2\b0 \cf2 genres 
\f1\b \cf2 as 
\f2\b0 \cf2 g 
\f1\b \cf2 on 
\f2\b0 \cf2 m.genre_id = g.id;\
\cf2 \

\f1\b \cf2 select 
\f2\b0 \cf2 title, first_name, last_name 
\f1\b \cf2 from 
\f2\b0 \cf2 actors a 
\f1\b \cf2 inner join 
\f2\b0 \cf2 actor_episode ae 
\f1\b \cf2 on 
\f2\b0 \cf2 a.id = ae.actor_id 
\f1\b \cf2 inner join 
\f2\b0 \cf2 episodes e 
\f1\b \cf2 on 
\f2\b0 \cf2 e.id = ae.episode_id;\
\cf2 \

\f1\b \cf2 select 
\f2\b0 \cf2 s.title, 
\f1\b \cf2 COUNT
\f2\b0 \cf2 (se.id) 
\f1\b \cf2 from 
\f2\b0 \cf2 series s 
\f1\b \cf2 join 
\f2\b0 \cf2 seasons se 
\f1\b \cf2 on 
\f2\b0 \cf2 se.serie_id = s.id 
\f1\b \cf2 group by 
\f2\b0 \cf2 s.title;\
\cf2 \

\f1\b \cf2 select 
\f2\b0 \cf2 g.name, 
\f1\b \cf2 COUNT
\f2\b0 \cf2 (m.id) 
\f1\b \cf2 from 
\f2\b0 \cf2 genres g 
\f1\b \cf2 inner join 
\f2\b0 \cf2 movies m 
\f1\b \cf2 on 
\f2\b0 \cf2 g.id = m.genre_id 
\f1\b \cf2 group by 
\f2\b0 \cf2 g.name 
\f1\b \cf2 having COUNT
\f2\b0 \cf2 (m.id) > 3;\
\cf2 \

\f1\b \cf2 select distinct 
\f2\b0 \cf2 a.first_name, a.last_name 
\f1\b \cf2 from 
\f2\b0 \cf2 actors a 
\f1\b \cf2 inner join 
\f2\b0 \cf2 actor_movie am 
\f1\b \cf2 on 
\f2\b0 \cf2 a.id = am.actor_id 
\f1\b \cf2 inner join 
\f2\b0 \cf2 movies m 
\f1\b \cf2 on 
\f2\b0 \cf2 am.movie_id = m.id\

\f1\b \cf2 where 
\f2\b0 \cf2 m.title 
\f1\b \cf2 like 
\f2\b0 \cf2 'La Guerra de las Galaxias%';\
\cf2 \
}